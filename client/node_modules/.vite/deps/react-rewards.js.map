{
  "version": 3,
  "sources": ["../../react-rewards/src/functions/helpers.ts", "../../react-rewards/src/components/Confetti/Confetti.ts", "../../react-rewards/src/components/Emoji/Emoji.ts", "../../react-rewards/src/components/Balloons/Balloons.ts", "../../react-rewards/src/hooks/useReward.ts"],
  "sourcesContent": ["import { AnimateFunction } from './helpers.types';\n\nexport const animate: AnimateFunction = ({\n  root,\n  particles,\n  decay,\n  lifetime,\n  updateParticle,\n  onFinish,\n}) => {\n  const totalTicks = lifetime;\n  let tick = 0;\n\n  const update = () => {\n    particles.forEach((particle) =>\n      updateParticle(particle, tick / totalTicks, decay)\n    );\n\n    tick += 1;\n    if (tick < totalTicks) {\n      window.requestAnimationFrame(update);\n    } else {\n      particles.forEach((particle) => {\n        if (particle.element.parentNode === root) {\n          return root.removeChild(particle.element);\n        }\n      });\n      onFinish();\n    }\n  };\n\n  window.requestAnimationFrame(update);\n};\n\nexport const { PI } = Math;\n\nexport const degreesToRadians = (degrees: number) => degrees * (PI / 180);\n\nexport const getRandomInt = (min: number, max: number) => {\n  const minVal = Math.ceil(min);\n  const maxVal = Math.floor(max);\n  return Math.floor(Math.random() * (maxVal - minVal)) + minVal;\n};\n\nexport const generatePhysics = (\n  angle: number,\n  spread: number,\n  startVelocity: number,\n  differentiator: number\n) => {\n  const radAngle = degreesToRadians(angle);\n  const radSpread = degreesToRadians(spread);\n  const { random } = Math;\n  return {\n    x: 0,\n    y: 0,\n    z: 0,\n    height: 0,\n    wobble: random() * 10,\n    velocity: startVelocity * 0.5 + random() * startVelocity,\n    angle2D: -radAngle + (0.5 * radSpread - random() * radSpread),\n    angle3D: -(PI / 4) + random() * (PI / 2),\n    tiltAngle: random() * PI,\n    differentiator,\n  };\n};\n\nexport const getContainerById = (id: string) => {\n  const container = document.getElementById(id);\n  if (!container) {\n    console.error(\n      `Element with an ID of ${id} could not be found. Please provide a valid ID.`\n    );\n  }\n  return container;\n};\n", "import { ConfettiConfig } from './Confetti.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\n\nconst defaultColors = ['#A45BF1', '#25C6F6', '#72F753', '#F76C88', '#F5F770'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  colors: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.style['background-color'] = colors[index % colors.length];\n    element.style.width = `${elementSize}px`;\n    element.style.height = `${elementSize}px`;\n    element.style.position = position;\n    element.style.zIndex = `${zIndex}`;\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number\n) => {\n  const {\n    x,\n    y,\n    tiltAngle,\n    wobble,\n    angle2D,\n    angle3D,\n    velocity,\n    differentiator,\n  } = particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * velocity;\n  particle.physics.y += Math.sin(angle2D) * velocity;\n  particle.physics.z += Math.sin(angle3D) * velocity;\n  particle.physics.wobble += 0.05;\n  particle.physics.velocity *= decay;\n  particle.physics.y += 3.5;\n  particle.physics.tiltAngle += 0.15;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * (differentiator % 2 ? Math.sin(wobble / 4) : Math.cos(wobble / 4)));\n\n  const wobbleY = y + 5 * Math.sin(wobble);\n\n  particle.element.style.transform = `translate3d(${wobbleX}px, ${wobbleY}px, 0) rotate3d(1, 1, 1, ${\n    differentiator % 2 ? tiltAngle : -1 * tiltAngle\n  }rad)`;\n  particle.element.style.scale = `${1 - 0.2 * progress}`;\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const confetti = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: ConfettiConfig\n) => {\n  const options = config || {};\n  const {\n    elementCount = 50,\n    elementSize = 8,\n    colors = defaultColors,\n    angle = 90,\n    spread = 45,\n    decay = 0.94,\n    lifetime = 200,\n    startVelocity = 35,\n    zIndex = 0,\n    position = 'fixed',\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    colors\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({\n    root,\n    particles,\n    decay,\n    lifetime,\n    updateParticle,\n    onFinish,\n  });\n};\n", "import { EmojiConfig } from './Emoji.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\n\nconst defaultEmoji = ['ðŸ¤“', 'ðŸ˜Š', 'ðŸ¥³'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  emojis: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.innerHTML = emojis[index % emojis.length];\n    element.style.fontSize = `${elementSize + getRandomInt(0, 4)}px`;\n    element.style.position = position;\n    element.style.zIndex = `${zIndex}`;\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number\n) => {\n  const { x, y, tiltAngle, angle2D, velocity, differentiator, wobble } =\n    particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * velocity;\n  particle.physics.y += Math.sin(angle2D) * velocity;\n  particle.physics.wobble += 0;\n  particle.physics.velocity *= decay;\n  particle.physics.y += 5;\n  particle.physics.tiltAngle += 0.05;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * Math.sin(wobble / 4));\n\n  particle.element.style.transform = `translate3d(${wobbleX}px, ${y}px, 0) rotate3d(0, 0, 1, ${\n    differentiator % 2 ? tiltAngle : -1 * tiltAngle\n  }rad)`;\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const emoji = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: EmojiConfig\n) => {\n  const options = config || {};\n  const {\n    elementCount = 20,\n    elementSize = 25,\n    emoji: emojiArray = defaultEmoji,\n    angle = 90,\n    spread = 45,\n    decay = 0.94,\n    lifetime = 200,\n    startVelocity = 35,\n    zIndex = 0,\n    position = 'fixed',\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    emojiArray\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({\n    root,\n    particles,\n    decay,\n    lifetime,\n    updateParticle,\n    onFinish,\n  });\n};\n", "import { BalloonsConfig } from './Balloons.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\nimport balloon from './balloon.svg';\n\nconst defaultColors = ['#A45BF1', '#25C6F6', '#72F753', '#F76C88', '#F5F770'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst handlePopBalloon = (\n  event: MouseEvent,\n  element: Element,\n  root: Element\n) => {\n  if (element.parentNode === root) {\n    root.removeChild(element);\n  }\n};\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  colors: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.innerHTML = balloon;\n    element.style.width = `${elementSize}px`;\n    element.style.position = position;\n    element.style.color = colors[index % colors.length];\n    element.style.zIndex = `${zIndex}`;\n    element.addEventListener(\n      'click',\n      (event: MouseEvent) => {\n        handlePopBalloon(event, element, root);\n      },\n      { once: true }\n    );\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number\n) => {\n  const { x, y, tiltAngle, angle2D, velocity, differentiator, wobble } =\n    particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * 0.5 * velocity;\n  particle.physics.y += Math.sin(angle2D) * 0.5 * velocity;\n  particle.physics.wobble += 0;\n  particle.physics.velocity *= decay;\n  particle.physics.tiltAngle += 0.1;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * Math.sin(wobble));\n\n  particle.element.style.transform = `translate3d(${wobbleX}px, ${y}px, 0) rotate3d(0, 0, 1, ${\n    differentiator % 2\n      ? Math.sin(tiltAngle / 4) / 3\n      : Math.cos(tiltAngle / 4) / 3\n  }rad)`;\n  particle.element.style.scale = `${1 - 0.2 * progress}`;\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const balloons = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: BalloonsConfig\n) => {\n  const options = config || {};\n  const {\n    angle = 90,\n    decay = 0.999,\n    spread = 50,\n    startVelocity = 3,\n    elementCount = 10,\n    elementSize = 20,\n    lifetime = 600,\n    zIndex = 0,\n    position = 'fixed',\n    colors = defaultColors,\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    colors\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({ root, particles, decay, lifetime, updateParticle, onFinish });\n};\n", "import { useCallback, useState } from 'react';\nimport { confetti } from '../components/Confetti/Confetti';\nimport { emoji } from '../components/Emoji/Emoji';\nimport { balloons } from '../components/Balloons/Balloons';\nimport { UseRewardType } from './useReward.types';\nimport { getContainerById } from '../functions/helpers';\n\nexport const useReward: UseRewardType = (id, type, config) => {\n  const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n  const internalAnimatingCallback = () => {\n    setIsAnimating(false);\n  };\n\n  const reward = useCallback(() => {\n    const foundContainer = getContainerById(id);\n    if (!foundContainer) return;\n    setIsAnimating(true);\n    switch (type) {\n      case 'confetti':\n        confetti(foundContainer, internalAnimatingCallback, config);\n        break;\n      case 'emoji':\n        emoji(foundContainer, internalAnimatingCallback, config);\n        break;\n      case 'balloons':\n        balloons(foundContainer, internalAnimatingCallback, config);\n        break;\n      default:\n        console.error(`${type} is not a valid react-rewards type.`);\n    }\n  }, [config, id, type]);\n\n  return { reward, isAnimating };\n};\n"],
  "mappings": "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",
  "names": ["P", "D"]
}
